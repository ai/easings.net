- name: easeInSine
  css:  cubic-bezier(0.470, 0.000, 0.745, 0.715)
  maths: |-2
      return 1 - Math.cos((x * Math.PI) / 2);
- name: easeOutSine
  css:  cubic-bezier(0.390, 0.575, 0.565, 1.000)
  maths: |-2
      return Math.sin((x * Math.PI) / 2);
- name: easeInOutSine
  css:  cubic-bezier(0.445, 0.050, 0.550, 0.950)
  maths: |-2
    return -(Math.cos(Math.PI * x) - 1) / 2;
- name: easeInQuad
  css:  cubic-bezier(0.550, 0.085, 0.680, 0.530)
  maths: |-2
    return x * x;
- name: easeOutQuad
  css:  cubic-bezier(0.250, 0.460, 0.450, 0.940)
  maths: |-2
    return 1 - (1 - x) * (1 - x);
- name: easeInOutQuad
  css:  cubic-bezier(0.455, 0.030, 0.515, 0.955)
  maths: |-2
    return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
- name: easeInCubic
  css:  cubic-bezier(0.550, 0.055, 0.675, 0.190)
  maths: |-2
    return x * x * x;
- name: easeOutCubic
  css:  cubic-bezier(0.215, 0.610, 0.355, 1.000)
  maths: |-2
    return 1 - Math.pow(1 - x, 3);
- name: easeInOutCubic
  css:  cubic-bezier(0.645, 0.045, 0.355, 1.000)
  maths: |-2
    return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
- name: easeInQuart
  css:  cubic-bezier(0.895, 0.030, 0.685, 0.220)
  maths: |-2
    return x * x * x * x;
- name: easeOutQuart
  css:  cubic-bezier(0.165, 0.840, 0.440, 1.000)
  maths: |-2
    return 1 - Math.pow(1 - x, 4);
- name: easeInOutQuart
  css:  cubic-bezier(0.770, 0.000, 0.175, 1.000)
  maths: |-2
    return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
- name: easeInQuint
  css:  cubic-bezier(0.755, 0.050, 0.855, 0.060)
  maths: |-2
    return x * x * x * x * x;
- name: easeOutQuint
  css:  cubic-bezier(0.230, 1.000, 0.320, 1.000)
  maths: |-2
    return 1 - Math.pow(1 - x, 5);
- name: easeInOutQuint
  css:  cubic-bezier(0.860, 0.000, 0.070, 1.000)
  maths: |-2
    return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
- name: easeInExpo
  css:  cubic-bezier(0.950, 0.050, 0.795, 0.035)
  maths: |-2
    return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
- name: easeOutExpo
  css:  cubic-bezier(0.190, 1.000, 0.220, 1.000)
  maths: |-2
    return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
- name: easeInOutExpo
  css:  cubic-bezier(1.000, 0.000, 0.000, 1.000)
  maths: |-2
    return x === 0
      ? 0
      : x === 1
      ? 1
      : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2
      : (2 - Math.pow(2, -20 * x + 10)) / 2;
- name: easeInCirc
  css:  cubic-bezier(0.600, 0.040, 0.980, 0.335)
  maths: |-2
    return 1 - Math.sqrt(1 - Math.pow(x, 2));
- name: easeOutCirc
  css:  cubic-bezier(0.075, 0.820, 0.165, 1.000)
  maths: |-2
    return Math.sqrt(1 - Math.pow(x - 1, 2));
- name: easeInOutCirc
  css:  cubic-bezier(0.785, 0.135, 0.150, 0.860)
  maths: |-2
    return x < 0.5
      ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2
      : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
- name: easeInBack
  css:  cubic-bezier(0.600, -0.280, 0.735, 0.045)
  maths: |-2
    const c1 = 1.70158;
    const c3 = c1 + 1;

    return c3 * x * x * x - c1 * x * x;
- name: easeOutBack
  css:  cubic-bezier(0.175,  0.885, 0.320, 1.275)
  maths: |-2
    const c1 = 1.70158;
    const c3 = c1 + 1;

    return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
- name: easeInOutBack
  css:  cubic-bezier(0.680, -0.550, 0.265, 1.550)
  maths: |-2
    const c1 = 1.70158;
    const c2 = c1 * 1.525;

    return x < 0.5
      ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2
      : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
- name: easeInElastic
  css:  no
  offset: bottom
  maths: |-2
    const c4 = (2 * Math.PI) / 3;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);
- name: easeOutElastic
  css:  no
  offset: top
  maths: |-2
    const c4 = (2 * Math.PI) / 3;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;
- name: easeInOutElastic
  css:  no
  maths: |-2
    const c5 = (2 * Math.PI) / 4.5;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : x < 0.5
      ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2
      : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5)) / 2 + 1;
- name: easeInBounce
  css:  no
  maths: |-2
    return 1 - easeOutBounce(1 - x);
- name: easeOutBounce
  css:  no
  maths: |-2
    const n1 = 7.5625;
    const d1 = 2.75;

    if (x < 1 / d1) {
        return n1 * x * x;
    } else if (x < 2 / d1) {
        return n1 * (x -= 1.5 / d1) * x + 0.75;
    } else if (x < 2.5 / d1) {
        return n1 * (x -= 2.25 / d1) * x + 0.9375;
    } else {
        return n1 * (x -= 2.625 / d1) * x + 0.984375;
    }
- name: easeInOutBounce
  css:  no
  maths: |-2
    return x < 0.5
      ? (1 - easeOutBounce(1 - 2 * x)) / 2
      : (1 + easeOutBounce(2 * x - 1)) / 2;
