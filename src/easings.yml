- name: easeInSine
  css:  cubic-bezier(0.12, 0, 0.39, 0)
  maths: |-2
      return 1 - cos((x * PI) / 2);
- name: easeOutSine
  css:  cubic-bezier(0.61, 1, 0.88, 1)
  maths: |-2
      return sin((x * PI) / 2);
- name: easeInOutSine
  css:  cubic-bezier(0.37, 0, 0.63, 1)
  maths: |-2
    return -(cos(PI * x) - 1) / 2;
- name: easeInQuad
  css:  cubic-bezier(0.11, 0, 0.5, 0)
  maths: |-2
    return x * x;
- name: easeOutQuad
  css:  cubic-bezier(0.5, 1, 0.89, 1)
  maths: |-2
    return 1 - (1 - x) * (1 - x);
- name: easeInOutQuad
  css:  cubic-bezier(0.45, 0, 0.55, 1)
  maths: |-2
    return x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2;
- name: easeInCubic
  css:  cubic-bezier(0.32, 0, 0.67, 0)
  maths: |-2
    return x * x * x;
- name: easeOutCubic
  css:  cubic-bezier(0.33, 1, 0.68, 1)
  maths: |-2
    return 1 - pow(1 - x, 3);
- name: easeInOutCubic
  css:  cubic-bezier(0.65, 0, 0.35, 1)
  maths: |-2
    return x < 0.5 ? 4 * x * x * x : 1 - pow(-2 * x + 2, 3) / 2;
- name: easeInQuart
  css:  cubic-bezier(0.5, 0, 0.75, 0)
  maths: |-2
    return x * x * x * x;
- name: easeOutQuart
  css:  cubic-bezier(0.25, 1, 0.5, 1)
  maths: |-2
    return 1 - pow(1 - x, 4);
- name: easeInOutQuart
  css:  cubic-bezier(0.76, 0, 0.24, 1)
  maths: |-2
    return x < 0.5 ? 8 * x * x * x * x : 1 - pow(-2 * x + 2, 4) / 2;
- name: easeInQuint
  css:  cubic-bezier(0.64, 0, 0.78, 0)
  maths: |-2
    return x * x * x * x * x;
- name: easeOutQuint
  css:  cubic-bezier(0.22, 1, 0.36, 1)
  maths: |-2
    return 1 - pow(1 - x, 5);
- name: easeInOutQuint
  css:  cubic-bezier(0.83, 0, 0.17, 1)
  maths: |-2
    return x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2;
- name: easeInExpo
  css:  cubic-bezier(0.7, 0, 0.84, 0)
  maths: |-2
    return x === 0 ? 0 : pow(2, 10 * x - 10);
- name: easeOutExpo
  css:  cubic-bezier(0.16, 1, 0.3, 1)
  maths: |-2
    return x === 1 ? 1 : 1 - pow(2, -10 * x);
- name: easeInOutExpo
  css:  cubic-bezier(0.87, 0, 0.13, 1)
  maths: |-2
    return x === 0
      ? 0
      : x === 1
      ? 1
      : x < 0.5 ? pow(2, 20 * x - 10) / 2
      : (2 - pow(2, -20 * x + 10)) / 2;
- name: easeInCirc
  css:  cubic-bezier(0.55, 0, 1, 0.45)
  maths: |-2
    return 1 - sqrt(1 - pow(x, 2));
- name: easeOutCirc
  css:  cubic-bezier(0, 0.55, 0.45, 1)
  maths: |-2
    return sqrt(1 - pow(x - 1, 2));
- name: easeInOutCirc
  css:  cubic-bezier(0.85, 0, 0.15, 1)
  maths: |-2
    return x < 0.5
      ? (1 - sqrt(1 - pow(2 * x, 2))) / 2
      : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2;
- name: easeInBack
  css:  cubic-bezier(0.36, 0, 0.66, -0.56)
  maths: |-2
    const c1 = 1.70158;
    const c3 = c1 + 1;

    return c3 * x * x * x - c1 * x * x;
- name: easeOutBack
  css:  cubic-bezier(0.34, 1.56, 0.64, 1)
  maths: |-2
    const c1 = 1.70158;
    const c3 = c1 + 1;

    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);
- name: easeInOutBack
  css:  cubic-bezier(0.68, -0.6, 0.32, 1.6)
  maths: |-2
    const c1 = 1.70158;
    const c2 = c1 * 1.525;

    return x < 0.5
      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2
      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
- name: easeInElastic
  css:  no
  offset: bottom
  maths: |-2
    const c4 = (2 * Math.PI) / 3;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4);
- name: easeOutElastic
  css:  no
  offset: top
  maths: |-2
    const c4 = (2 * Math.PI) / 3;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;
- name: easeInOutElastic
  css:  no
  maths: |-2
    const c5 = (2 * Math.PI) / 4.5;

    return x === 0
      ? 0
      : x === 1
      ? 1
      : x < 0.5
      ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2
      : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;
- name: easeInBounce
  css:  no
  maths: |-2
    return 1 - easeOutBounce(1 - x);
- name: easeOutBounce
  css:  no
  maths: |-2
    const n1 = 7.5625;
    const d1 = 2.75;

    if (x < 1 / d1) {
        return n1 * x * x;
    } else if (x < 2 / d1) {
        return n1 * (x -= 1.5 / d1) * x + 0.75;
    } else if (x < 2.5 / d1) {
        return n1 * (x -= 2.25 / d1) * x + 0.9375;
    } else {
        return n1 * (x -= 2.625 / d1) * x + 0.984375;
    }
- name: easeInOutBounce
  css:  no
  maths: |-2
    return x < 0.5
      ? (1 - easeOutBounce(1 - 2 * x)) / 2
      : (1 + easeOutBounce(2 * x - 1)) / 2;
