include ../helpers/complexFunction

mixin Item(item, index)
	-
		var gradient = 'inOut';
		if (index === 0) gradient = 'in';
		if (index === 1) gradient = 'out';

		const radioScale = 1;
		const chartWidth = 125 * radioScale;
		const chartHeight = 85 * radioScale;

		var x1, y1, x2, y2;

		if (item.css !== "no") {
			const points = /([-\d.]+), ([-\d.]+), ([-\d.]+), ([-\d.]+)/.exec(item.css);
			x1 = (parseFloat(points[1]) * chartWidth).toFixed(3);
			y1 = ((1 - parseFloat(points[2])) * chartHeight).toFixed(3);
			x2 = (parseFloat(points[3]) * chartWidth).toFixed(3);
			y2 = ((1 - parseFloat(points[4])) * chartHeight).toFixed(3);
		}

	.b-function.js-function(id=(`func-${item.name}`) data-name=item.name data-func=item.css)
		a.b-function__chart.b-chart.js-function-chart(href=`#${item.name}`)
			.b-chart__wrap
				svg.b-chart__image(viewBox=(`0 0 ${chartWidth} ${chartHeight}`) xmlns="http://www.w3.org/2000/svg"
				height=(chartHeight) width=(chartWidth))
					g.b-chart__explanations
						path.b-chart__axis(d=(`M1 0V${chartHeight - 1}H${chartWidth}`) fill="none")
						text.b-chart__text(x="4" y="8") x
						text.b-chart__text(x=(chartWidth - 3) y=(chartHeight - 5) text-anchor="end") t

					if item.css !== "no"
						path.b-chart__curve.js-function-curve(d=(`M1 ${chartHeight-1}C${x1} ${y1} ${x2} ${y2} ${chartWidth-1} 1`)
						fill="none" stroke=(`url(#${gradient})`))
					else
						path.b-chart__curve.js-function-curve(fill="none" stroke=(`url(#${gradient})`)
						d=(`M1 ${chartHeight - 1} L${getEasing(item.name, chartWidth, chartHeight)}`))

				.b-chart__cursor.js-function-cursor(style=`${item.css !== "no" ? `transition-timing-function:${item.css}` : ''}`)

		.b-function__caption= item.name
